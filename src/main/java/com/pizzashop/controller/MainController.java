package com.pizzashop.controller;

import com.pizzashop.model.*;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.ResourceBundle;

/**
 * Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏´‡∏•‡∏±‡∏Å
 */
public class MainController implements Initializable {

    // === FXML Components ===

    @FXML private TableView<Item> itemTableView;
    @FXML private TableColumn<Item, String> nameColumn;
    @FXML private TableColumn<Item, String> categoryColumn;
    @FXML private TableColumn<Item, Double> priceColumn;

    @FXML private ComboBox<String> categoryFilter;
    @FXML private TextField searchField;

    @FXML private TableView<OrderItem> cartTableView;
    @FXML private TableColumn<OrderItem, String> cartItemColumn;
    @FXML private TableColumn<OrderItem, Integer> cartQuantityColumn;
    @FXML private TableColumn<OrderItem, Double> cartPriceColumn;

    // Member search components
    @FXML private TextField PhoneTextField;
    @FXML private Button checkMemberButton;
    @FXML private Text memberInfoLabel;
    @FXML private CheckBox dineInCheckBox;

    @FXML private Label totalLabel;
    @FXML private Label discountLabel;
    @FXML private Label promotionLabel;
    @FXML private TextArea orderSummaryArea;

    @FXML private Button addToCartButton;
    @FXML private Button removeFromCartButton;
    @FXML private Button clearCartButton;
    @FXML private Button checkoutButton;
    @FXML private Button registerMemberButton;

    // === Instance Variables ===

    private DataManager dataManager;
    private ObservableList<Item> allItems;
    private ObservableList<Item> filteredItems;
    private Order currentOrder;
    private Member currentMember; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô DataManager ‡∏Å‡πà‡∏≠‡∏ô
        dataManager = DataManager.getInstance();

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô NullPointerException)
        createNewOrder();
        setupTableViews();
        setupControls();
        loadData();
    }

    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TableViews
     */
    private void setupTableViews() {
        // Item Table
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        categoryColumn.setCellValueFactory(new PropertyValueFactory<>("category"));
        priceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));

        // Format price column
        priceColumn.setCellFactory(column -> new TableCell<Item, Double>() {
            @Override
            protected void updateItem(Double price, boolean empty) {
                super.updateItem(price, empty);
                if (empty || price == null) {
                    setText(null);
                } else {
                    setText(String.format("%.2f ‡∏ö‡∏≤‡∏ó", price));
                }
            }
        });

        // Cart Table
        cartItemColumn.setCellValueFactory(cellData ->
                new SimpleStringProperty(cellData.getValue().getItem().getName()));
        cartQuantityColumn.setCellValueFactory(cellData ->
                new SimpleIntegerProperty(cellData.getValue().getQuantity()).asObject());
        cartPriceColumn.setCellValueFactory(cellData ->
                new SimpleDoubleProperty(cellData.getValue().getTotal()).asObject());

        // Format cart price column
        cartPriceColumn.setCellFactory(column -> new TableCell<OrderItem, Double>() {
            @Override
            protected void updateItem(Double price, boolean empty) {
                super.updateItem(price, empty);
                if (empty || price == null) {
                    setText(null);
                } else {
                    setText(String.format("%.2f ‡∏ö‡∏≤‡∏ó", price));
                }
            }
        });
    }

    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Controls
     */
    private void setupControls() {

        // Category filter
        categoryFilter.getItems().add("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
        categoryFilter.getItems().addAll(dataManager.getAllCategories());
        categoryFilter.setValue("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
        categoryFilter.setOnAction(e -> filterItems());

        // Search field
        searchField.textProperty().addListener((obs, oldVal, newVal) -> filterItems());

        // Phone search setup
        setupPhoneSearch();

        // Dine in checkbox
        dineInCheckBox.setOnAction(e -> updateOrderDineIn());

        // Double click to add item
        itemTableView.setRowFactory(tv -> {
            TableRow<Item> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && !row.isEmpty()) {
                    addToCart();
                }
            });
            return row;
        });

        // Enable/disable buttons
        updateButtonStates();
    }


     //‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    private void setupPhoneSearch() {
        memberInfoLabel.setText("");
        PhoneTextField.setOnAction(e -> searchMemberByPhone());
        checkMemberButton.setOnAction(e -> searchMemberByPhone());
        PhoneTextField.textProperty().addListener((obs, oldVal, newVal) -> {
            if (!oldVal.equals(newVal)) {
                resetMemberInfo();
            }
        });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    @FXML
    private void searchMemberByPhone() {
        String phoneNumber = PhoneTextField.getText().trim();

        if (phoneNumber.isEmpty()) {
            showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£");
            return;
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å DataManager (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Optional<Member>)
        Optional<Member> memberOptional = dataManager.findMemberByPhone(phoneNumber);

        if (memberOptional.isPresent()) {
            Member foundMember = memberOptional.get();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!foundMember.isActive()) {
                memberInfoLabel.setText("‚ùå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß");
                memberInfoLabel.setStyle("-fx-fill: red;");
                currentMember = null;
                currentOrder.setMember(null);
            } else if (foundMember.isExpired()) {
                memberInfoLabel.setText("‚ö†Ô∏è ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß (" + foundMember.getName() + ")");
                memberInfoLabel.setStyle("-fx-fill: orange;");
                currentMember = null;
                currentOrder.setMember(null);
            } else {
                // ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
                currentMember = foundMember;
                currentOrder.setMember(foundMember);
                displayMemberInfo(foundMember);
            }
        } else {
            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            memberInfoLabel.setText("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå " + phoneNumber);
            memberInfoLabel.setStyle("-fx-fill: red;");
            currentMember = null;
            currentOrder.setMember(null);
        }

        updateOrderSummary();
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    private void displayMemberInfo(Member member) {
        StringBuilder info = new StringBuilder();
        info.append("‚úÖ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").append(member.getName());

        if (member.isBirthday()) {
            info.append("\nüéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ! ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 15%");
            memberInfoLabel.setStyle("-fx-fill: #ff6b35;");
        } else {
            memberInfoLabel.setStyle("-fx-fill: green;");
        }

        memberInfoLabel.setText(info.toString());
    }

    /**
     * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    private void resetMemberInfo() {
        if (currentMember != null) {
            currentMember = null;
            currentOrder.setMember(null);
            memberInfoLabel.setText("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
            memberInfoLabel.setStyle("-fx-fill: black;");
            updateOrderSummary();
        }
    }

    /**
     * ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    @FXML
    private void clearMemberSearch() {
        PhoneTextField.clear();
        resetMemberInfo();
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    private void loadData() {
        allItems = FXCollections.observableArrayList(dataManager.getAllItems());
        filteredItems = FXCollections.observableArrayList(allItems);
        itemTableView.setItems(filteredItems);
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
     */
    private void createNewOrder() {
        currentOrder = dataManager.createOrder(false);
        updateCartDisplay();
        updateOrderSummary();
    }

    /**
     * ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
     */
    private void filterItems() {
        String selectedCategory = categoryFilter.getValue();
        String searchText = searchField.getText().toLowerCase().trim();

        filteredItems.clear();

        for (Item item : allItems) {
            boolean matchCategory = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î".equals(selectedCategory) ||
                    item.getCategory().equals(selectedCategory);
            boolean matchSearch = searchText.isEmpty() ||
                    item.getName().toLowerCase().contains(searchText);

            if (matchCategory && matchSearch) {
                filteredItems.add(item);
            }
        }
    }

    // === Event Handlers ===

    @FXML
    private void addToCart() {
        Item selectedItem = itemTableView.getSelectionModel().getSelectedItem();
        if (selectedItem == null) {
            showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
            return;
        }

        // ‡∏ñ‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        TextInputDialog dialog = new TextInputDialog("1");
        dialog.setTitle("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
        dialog.setHeaderText("‡πÄ‡∏û‡∏¥‡πà‡∏°: " + selectedItem.getName());
        dialog.setContentText("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:");

        Optional<String> result = dialog.showAndWait();
        if (result.isPresent()) {
            try {
                int quantity = Integer.parseInt(result.get());
                if (quantity > 0) {
                    currentOrder.addItem(selectedItem, quantity);
                    updateCartDisplay();
                    updateOrderSummary();
                    updateButtonStates();
                } else {
                    showAlert("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                }
            } catch (NumberFormatException e) {
                showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
            }
        }
    }

    @FXML
    private void removeFromCart() {
        OrderItem selected = cartTableView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            return;
        }

        currentOrder.removeItem(selected.getItem());
        updateCartDisplay();
        updateOrderSummary();
        updateButtonStates();
    }

    @FXML
    private void clearCart() {
        if (currentOrder.isEmpty()) return;

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤");
        alert.setHeaderText("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?");
        alert.setContentText("‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ");

        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            currentOrder.clear();
            updateCartDisplay();
            updateOrderSummary();
            updateButtonStates();
        }
    }

    @FXML
    private void checkout() {
        if (currentOrder.isEmpty()) {
            showAlert("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
            return;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        Alert receipt = new Alert(Alert.AlertType.INFORMATION);
        receipt.setTitle("‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à");
        receipt.setHeaderText("‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        receipt.setContentText(currentOrder.getOrderSummary());
        receipt.getDialogPane().setPrefWidth(400);
        receipt.showAndWait();

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        dataManager.saveOrder(currentOrder);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        createNewOrder();
        clearMemberSearch();
        updateButtonStates();
    }

    @FXML
    private void openMemberRegistration() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/example/pizza/view/MemberRegistrationView.fxml"));
            Parent root = loader.load();

            Stage stage = new Stage();
            stage.setTitle("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å");
            stage.setScene(new Scene(root));
            stage.initModality(Modality.WINDOW_MODAL);
            stage.initOwner(registerMemberButton.getScene().getWindow());

            MemberRegistrationController controller = loader.getController();
            controller.setMainController(this);

            stage.showAndWait();

        } catch (IOException e) {
            e.printStackTrace();
            showAlert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ", "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
        }
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á
     */
    private void updateOrderDineIn() {
        currentOrder.setDineIn(dineInCheckBox.isSelected());
        updateOrderSummary();
    }

    // === UI Update Methods ===

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
     */
    private void updateCartDisplay() {
        ObservableList<OrderItem> cartItems = FXCollections.observableArrayList(currentOrder.getOrderItems());
        cartTableView.setItems(cartItems);
    }


    //‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    private void updateOrderSummary() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏ï‡∏±‡∏ß Controller
        double originalPrice = calculateOriginalPrice();
        double finalPrice = calculateFinalPrice();
        double totalSavings = originalPrice - finalPrice;

        // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        totalLabel.setText(String.format("%.2f ‡∏ö‡∏≤‡∏ó", finalPrice));

        // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡πÉ‡∏ô discountLabel (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏ô‡∏™‡∏£‡∏∏‡∏õ)
        if (totalSavings > 0) {
            discountLabel.setText(String.format("‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: %.2f ‡∏ö‡∏≤‡∏ó", totalSavings));
            discountLabel.setVisible(true);
            discountLabel.setStyle("-fx-text-fill: red; -fx-font-weight: bold;");
        } else {
            discountLabel.setVisible(false);
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        if (currentOrder.hasFreeWednesdayPizza()) {
            promotionLabel.setText("üçï ‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ü‡∏£‡∏µ 1 ‡∏ñ‡∏≤‡∏î! (‡πÇ‡∏õ‡∏£‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò)");
            promotionLabel.setVisible(true);
        } else {
            promotionLabel.setVisible(false);
        }

        // ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        orderSummaryArea.setText(generateOrderPreview());

    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏î
     */
    private double calculateOriginalPrice() {
        if (currentOrder.isEmpty()) return 0.0;

        double total = 0.0;
        for (OrderItem item : currentOrder.getOrderItems()) {
            total += item.getItem().getPrice() * item.getQuantity();
        }
        return total;
    }

    /**
     * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î
     */
    private double calculateFinalPrice() {
        return currentOrder.getTotalPrice();
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
     */
    private String generateOrderPreview() {
        StringBuilder sb = new StringBuilder();
        double finalPrice = calculateFinalPrice();

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        sb.append("=== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ===\n");
        sb.append("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ").append(currentOrder.getOrderId()).append("\n");
        sb.append("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ").append(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))).append("\n");
        sb.append("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ").append(currentOrder.isDineIn() ? "‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô" : "‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏±‡∏ö").append("\n");

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        if (currentOrder.getMember() != null) {
            Member member = currentOrder.getMember();
            sb.append("‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ").append(member.getName()).append(" (").append(member.getMemberId()).append(")\n");
            if (member.isBirthday()) {
                sb.append("üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î - ‡πÑ‡∏î‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 15%!\n");
            } else {
                sb.append("üí≥ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 10%\n");
            }
        } else {
            sb.append("‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n");
        }

        sb.append("\n=== ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ===\n");

        if (currentOrder.isEmpty()) {
            sb.append("(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n");
        } else {
            double originalTotal = 0;
            double discountAmount = 0.0;
            double freePizza = 128;
            for (OrderItem item : currentOrder.getOrderItems()) {
                double itemTotal = item.getItem().getPrice() * item.getQuantity();
                originalTotal += itemTotal;
                sb.append("‚Ä¢ ").append(item.getItem().getName())
                        .append(" x ").append(item.getQuantity())
                        .append(" = ").append(String.format("%.2f ‡∏ö‡∏≤‡∏ó", itemTotal)).append("\n");

            }

            if (currentOrder.hasFreeWednesdayPizza()){
                originalTotal-=freePizza;
            }

            sb.append("\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤ ===\n");
            sb.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ï‡πá‡∏°: ").append(String.format("%.2f ‡∏ö‡∏≤‡∏ó", originalTotal)).append("\n");

            if (currentOrder.getMember() != null) {

                double discountRate = currentOrder.getMember().isBirthday() ? 0.15 : 0.10;
                discountAmount = originalTotal * discountRate;
                sb.append("‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (").append((int)(discountRate * 100)).append("%): -")
                        .append(String.format("%.2f ‡∏ö‡∏≤‡∏ó", discountAmount)).append("\n");
            }

            if (currentOrder.hasFreeWednesdayPizza()) {
                sb.append("‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î ‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏ü‡∏£‡∏µ: -128.00 ‡∏ö‡∏≤‡∏ó\n");
            }

            sb.append("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ").append(String.format("%.2f ‡∏ö‡∏≤‡∏ó", finalPrice )).append("\n");

        }

        return sb.toString();
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏∏‡πà‡∏°
     */
    private void updateButtonStates() {
        boolean hasItems = !currentOrder.isEmpty();
        boolean hasSelectedCartItem = cartTableView.getSelectionModel().getSelectedItem() != null;
        boolean hasSelectedItem = itemTableView.getSelectionModel().getSelectedItem() != null;

        addToCartButton.setDisable(!hasSelectedItem);
        removeFromCartButton.setDisable(!hasSelectedCartItem);
        clearCartButton.setDisable(!hasItems);
        checkoutButton.setDisable(!hasItems);
    }

    /**
     * ‡πÅ‡∏™‡∏î‡∏á Alert
     */
    private void showAlert(String message, String title) {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // === Selection Handlers ===

    @FXML
    private void handleItemSelection() {
        updateButtonStates();
    }

    @FXML
    private void handleCartSelection() {
        updateButtonStates();
    }

    /**
     * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà
     */
    public void refreshMemberData() {
        if (!PhoneTextField.getText().trim().isEmpty()) {
            searchMemberByPhone();
        }
    }
}